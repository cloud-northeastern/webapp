name: Validate the Packer AMI Template

env:
  AWS_REGION: us-east-1

on:
  pull_request:
    branches: [main]

jobs:
  packer_init_validate_build:
    runs-on: ubuntu-latest
    name: Build AWS Custom AMI with Node Application artifacts
    steps:
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2

      - name: Step 2 - zip all the webApp files
        run: |
          zip -r webapp.zip ./
          pwd
      
      - name: check the current
        run: ls -la

      - name: Step 3 - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run `packer init`
        id: init
        run: "packer init ."
        
      - name: Run `packer validate`
        id: validate
        run: "packer validate ."

      - name: Build Artifact
        run: packer build -color=false -on-error=abort .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
  deploy:
    name: deploy AMI
    runs-on: ubuntu-latest
    needs: build-and-deploy

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Setup Demo Environment
        run: |
          export AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}
          export AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}

      - name: Get Auto Scaling Group and Launch Template
        id: get_asg_and_lt
        run: |
          LT_NAME_PREFIX="launchTemplate-"

          LT_NAME=$(aws ec2 describe-launch-templates --query "LaunchTemplates[?starts_with(LaunchTemplateName, '${LT_NAME_PREFIX}')].LaunchTemplateName" --output text)

          if [ -z "$LT_NAME" ]; then
            echo "No Launch Template found with the specified prefix."
            exit 1
          fi

          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(LaunchTemplate.LaunchTemplateName, '${LT_NAME}')].AutoScalingGroupName" --output text)

          if [ -z "$ASG_NAME" ]; then
            echo "No Auto Scaling Group found using the Launch Template."
            exit 1
          fi

          ASG_ID=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME --query 'AutoScalingGroups[0].AutoScalingGroupARN' --output text | cut -d':' -f 6)
          LT_ID=$(aws ec2 describe-launch-templates --launch-template-names $LT_NAME --query 'LaunchTemplates[0].LaunchTemplateId' --output text)

          echo "Auto Scaling Group Name: $ASG_NAME"
          echo "Auto Scaling Group ID: $ASG_ID"
          echo "Launch Template Name: $LT_NAME"
          echo "Launch Template ID: $LT_ID"

          AMI_ID=$(aws ec2 describe-images \
          --executable-users ${{secrets.USER}} \
          --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
          --filters "Name=name,Values=custom-debian-Raj*" \
          --output text 
          )

          aws ec2 create-launch-template-version --launch-template-id $LT_ID \
          --version-description "Latest AMI version" \
          --source-version 1 \
          --launch-template-data "ImageId=$AMI_ID"

          echo "::set-output name=asg_name::$ASG_NAME"
          echo "::set-output name=asg_id::$ASG_ID"
          echo "::set-output name=lt_name::$LT_NAME"
          echo "::set-output name=lt_id::$LT_ID"

      - name: Trigger Auto Scaling Group Instance Refresh with Latest Launch Template
        run: |
          ASG_NAME="${{ steps.get_asg_and_lt.outputs.asg_name }}"

          LT_NAME_PREFIX="launchTemplate-"

          LT_NAME=$(aws ec2 describe-launch-templates --query "LaunchTemplates[?starts_with(LaunchTemplateName, '${LT_NAME_PREFIX}')].LaunchTemplateName" --output text)

            # Get the latest version of the Launch Template
          LATEST_LT_VERSION=$(aws ec2 describe-launch-templates --launch-template-names ${LT_NAME} --query "LaunchTemplates[0].LatestVersionNumber" --output text)


            # Update the Auto Scaling Group with the latest Launch Template version
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME --launch-template "LaunchTemplateName=$LT_NAME,Version=$LATEST_LT_VERSION"

            # Trigger an instance refresh with the latest Launch Template as default
          aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME --strategy Rolling

      - name: Wait for Auto Scaling Group Instance Refresh Completion
        run: |
          ASG_NAME="${{ steps.get_asg_and_lt.outputs.asg_name }}"
          REFRESH_STATUS=""
          while [[ "$REFRESH_STATUS" != "Successful" && "$REFRESH_STATUS" != "Failed" ]]; do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --query 'InstanceRefreshes[0].Status' --output text)

            echo "Instance Refresh Status: $REFRESH_STATUS"
            sleep 15
          done
              
          # Check the instance refresh status and fail the workflow if it failed
          if [[ "$REFRESH_STATUS" == "Failed" ]]; then
            echo "Instance refresh failed. Workflow failed."
            exit 1
          else
            echo "Instance refresh completed successfully."
          fi