name: Validate the Packer AMI Template

env:
  AWS_REGION: us-east-1

on:
  pull_request:
    branches: [main]

jobs:
  packer_init_validate_build:
    runs-on: ubuntu-latest
    name: Build AWS Custom AMI with Node Application artifacts
    steps:
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2

      - name: Step 2 - zip all the webApp files
        run: |
          zip -r webapp.zip ./
          pwd
      
      - name: check the current
        run: ls -la

      - name: Step 3 - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run `packer init`
        id: init
        run: "packer init ."
        
      - name: Run `packer validate`
        id: validate
        run: "packer validate ."

      - name: Build Artifact
        run: packer build -color=false -on-error=abort .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
      
      - name: Copying ami Artifacts and Launching Template
        working-directory: ../webapp
        run: |
            AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
            echo $AMI_ID
            LT_ID=$(aws ec2 describe-launch-templates --launch-template-name launch_template)
  #            LT_ID="${LT_ID%\"}"
  #         LT_ID="${LT_ID#\"}"
            echo $LT_ID
            aws ec2 create-launch-template-version --launch-template-id $LT_ID --version-description WebVersion2 --source-version 1 --launch-template-data "ImageId=$AMI_ID"
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name asg_launch_config --launch-template LaunchTemplateId=$LT_ID,Version='$Latest'
        env:
          AWS_ACCESS_KEY_ID_DEMO: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY_DEMO: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
          
      - name: Refreshing Instances
        run: aws autoscaling start-instance-refresh --auto-scaling-group-name asg_launch_config
        env:
          AWS_ACCESS_KEY_ID_DEMO: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY_DEMO: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      
      - name: Wait for Instance Refresh to complete
        run: |
            TIMEOUT=900 
            START_TIME=$(date +%s)

            while true; do
              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

              # Check if the timeout has been reached
              if [ "$ELAPSED_TIME" -ge "$TIMEOUT" ]; then
                  echo "Instance Refresh timed out. Exiting with an error."
                  exit 1
              fi

              # Check the status of the instance refresh
              INSTANCE_REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name asg_launch_config | jq -r '.InstanceRefreshes[0].Status')
                echo "Instance Refresh Status: $INSTANCE_REFRESH_STATUS"

              # Break out of the loop if the instance refresh is completed (either Successful or Failed)
              if [ "$INSTANCE_REFRESH_STATUS" == "Successful" ] || [ "$INSTANCE_REFRESH_STATUS" == "Failed" ]; then
                break
              fi

              sleep 30
            done

            # Set the GitHub Actions workflow status based on the instance refresh status
            if [ "$INSTANCE_REFRESH_STATUS" == "Successful" ]; then
              echo "Instance Refresh successful."
              exit 0  # Exit with success status
            else
              echo "Instance Refresh failed. Exiting with an error."
              exit 1  # Exit with error status
            fi
        shell: bash
        env:
          AWS_ACCESS_KEY_ID_DEMO: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY_DEMO: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

